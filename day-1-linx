 Chapter 1: The linux Foundation
 The Linux Foundation provides a neutral, trusted hub for developers to code, manage, and scale open technology projects.
 It is also home to Linux creator Linus Torvalds and lead maintainer Greg Kroah-Hartman. The success of Linux has catalyzed growth in the open source community
 
 Chapter 2: Linux Philosophy and Concepts
Things change in Linux
We have repeated some things in the class material
We have tried to avoid holy wars

linux History:Linux is an open source computer operating system, initially developed on and for Intel x86-based personal computers. It has been subsequently ported to an astoundingly long list of other hardware platforms, from tiny embedded appliances to the world's largest supercomputers.
linux philosophy:Linux borrows heavily from the well-established UNIX operating system. It was written to be a free and open source system to be used in place of UNIX, which at the time was designed for computers much more powerful than PCs and was quite expensive. Files are stored in a hierarchical filesystem, with the top node of the system being the root or simply "/". Whenever possible, Linux makes its components available via files or objects that look like files. Processes, devices, and network sockets are all represented by file-like objects, and can often be worked with using the same utilities used for regular files.
linux community:The Linux community is a far-reaching ecosystem consisting of developers, system administrators, users and vendors who use many different forums to connect with one another. Among the most popular are:

Internet Relay Chat (IRC) software (such as WeeChat, HexChat, Pidgin and XChat)
Online communities and discussion boards including Linux User Groups (both local and online)
Many collaborative projects hosted on services such as GitHub and GitLab
Newsgroups and mailing lists, including the Linux Kernel Mailing List
Community events, e.g. Hackathons, Install Fests, Open Source Summits and Embedded Linux Conferences.

linux distrubutions:redhat,ubuntu,centos,debian,fedora

Chapter 3:linux boot and system porocess
1)BIOS First step
-Starting an x86-based Linux system involves a number of steps. When the computer is powered on, the Basic Input/Output System (BIOS) initializes the hardware, including the screen and keyboard, and tests the main memory. This process is also called POST (Power On Self Test).
-The BIOS software is stored on a ROM chip on the motherboard. After this, the remainder of the boot process is controlled by the operating system (OS).

2)Master Boot Record (MBR) and Boot Loader
Once the POST is completed, the system control passes from the BIOS to the boot loader.
The boot loader is usually stored on one of the hard disks in the system, either in the boot sector (for traditional BIOS/MBR systems)
or the EFI partition (for more recent (Unified) Extensible Firmware Interface or EFI/UEFI systems). 

-A number of boot loaders exist for Linux; 
the most common ones are GRUB (for GRand Unified Boot loader), 
ISOLINUX (for booting from removable media), and 
DAS U-Boot (for booting on embedded devices/appliances). 
Most Linux boot loaders can present a user interface for choosing alternative options for booting Linux, and even other operating systems that might be installed.
When booting Linux, the boot loader is responsible for loading the kernel image and the initial RAM disk or filesystem 
(which contains some critical files and device drivers needed to start the system) into memory.


3)BootLoader in action
The boot loader has two distinct stages:
For systems using the BIOS/MBR method, the boot loader resides at the first sector of the hard disk, also known as the Master Boot Record (MBR). 
The size of the MBR is just 512 bytes. 
In this stage, the boot loader examines the partition table and finds a bootable partition.
Once it finds a bootable partition, it then searches for the second stage boot loader, for example GRUB, and loads it into RAM (Random Access Memory). 
For systems using the EFI/UEFI method, UEFI firmware reads its Boot Manager data to determine which UEFI application is to be launched and from where (i.e. from which disk and partition the EFI partition can be found). 
The firmware then launches the UEFI application, for example GRUB, as defined in the boot entry in the firmware's boot manager. 
After this, it will check and analyze the system hardware and initialize any hardware device drivers built into the kernel.
This procedure is more complicated, but more versatile than the older MBR methods.

The second stage boot loader resides under /boot. A splash screen is displayed, which allows us to choose which operating system (OS) to boot.
After choosing the OS, the boot loader loads the kernel of the selected operating system into RAM and passes control to it.
Kernels are almost always compressed, so its first job is to uncompress itself. 
 After this, it will check and analyze the system hardware and initialize any hardware device drivers built into the kernel.
 
 4)initial Ram disk
 The initramfs filesystem image contains programs and binary files
 that perform all actions needed to mount the proper root filesystem, like providing kernel functionality for the needed filesystem and device drivers for mass storage controllers with a facility called udev (for user device), 
 which is responsible for figuring out which devices are present, locating the device drivers they need to operate properly, and loading them. 
 After the root filesystem has been found, it is checked for errors and mounted.
 
 initramfs --> programs ,Binary data  ->1)Mount proper root file system
                                         2)providing Kernel functionality
                                         3)locating devices
                                         4)locating drivers and load them
                                         5)checking errors for the root file system
                                         
5)Textmode login
Near the end of the boot process, init starts a number of text-mode login prompts. 
These enable you to type your username, followed by your password, and to eventually get a command shell.
However, if you are running a system with a graphical login interface, you will not see these at first.
-Usually, the default command shell is bash (the GNU Bourne Again Shell), but there are a number of other advanced command shells available.

6)linux kernel
The boot loader loads both the kernel and an initial RAM–based file system (initramfs) into memory, so it can be used directly by the kernel.
When the kernel is loaded in RAM, it immediately initializes and configures the computer’s memory and also configures all the hardware attached to the system.
This includes all processors, I/O subsystems, storage devices, etc.
The kernel also loads some necessary user space applications.

 7)sbin/init services 
 Once the kernel has set up all its hardware and mounted the root filesystem, the kernel runs /sbin/init. 
 This then becomes the initial process, which then starts other processes to get the system running.
 Most other processes on the system trace their origin ultimately to init; exceptions include the so-called kernel processes.
 These are started by the kernel directly, and their job is to manage internal operating system details.
 kernel -> sbin/init --->start other process to get the system running
 
 8)systemmd
 One thing to note is that /sbin/init now just points to /lib/systemd/systemd; i.e. systemd takes over the init process.
 One systemd command (systemctl) is used for most basic tasks.
 While we have not yet talked about working at the command line, here is a brief listing of its use:

-Starting, stopping, restarting a service (using httpd, the Apache web server, as an example) on a currently running system:
$ sudo systemctl start|stop|restart httpd.service
-Enabling or disabling a system service from starting up at system boot:
$ sudo systemctl enable|disable httpd.service

9)FileSystem
-filesystem,which is the embodiment of a method of storing and organizing arbitrary collections of data in a human-usable form.

Different types of filesystems supported by Linux:

Conventional disk filesystems: ext3, ext4, XFS, Btrfs, JFS, NTFS, vfat, exfat, etc.
Flash storage filesystems: ubifs, jffs2, yaffs, etc.
Database filesystems
Special purpose filesystems: procfs, sysfs, tmpfs, squashfs, debugfs, fuse, etc.

10)partitions and disks
-A partition is a physically contiguous section of a disk, or what appears to be so in some advanced setups.
A filesystem is a method of storing/finding files on a hard disk (usually in a partition). 

diff b/w windows and linux

                                 windows                                        linux
      partition->              Disk1                                     /dev/sda1
      filesystem type ->       NTFS/VFAT                                 EXT3,EXT4,XFS....
      Mounting parameters->    Drived letter                              Mount point
      Base foler(where os is
      stored)  ->               C:\                                        /           
      
    11) File system hierachy standard
    Linux systems store their important files according to a standard layout called the Filesystem Hierarchy Standard (FHS), 
    which has long been maintained by the Linux Foundation.
    Linux uses the ‘/’ character to separate paths (unlike Windows, which uses ‘\’), and does not have drive letters.
    Multiple drives and/or partitions are mounted as directories in the single filesystem. 
    Removable media such as USB drives and CDs and DVDs will show up as mounted at /run/media/yourusername/disklabel for recent Linux systems, or under /media for older distributions. 
     ---->example: if your username is student a USB pen drive labeled FEDORA might end up being found at /run/media/student/FEDORA, and a file README.txt on that disc would be at /run/media/student/FEDORA/README.txt.
     
     Hierarchy
     
     root directory of the entire file system hierarchy  /
     1)/bin/  ->essential user command interface   
     2)/boot/  ->static files of the boot loader
     3)/dev/   ->device files
     4)/etc/ ->most specific system configurations
     5)/home/ ->user home directories
     6)/lib/ ->essential shared libraries
     7)/media/ ->mount point for removable media
     8)/mnt/ ->mount point for a temporary mounted file systems
     9)/opt/ ->add-on application software process
     10)/sbin/->system binaries
     11)/srv/ ->data for services provided by this system
     12) /tmp/ ->temporary files
     13) /usr/ ->user utilites and applications
     14) /var/ ->variable files
     15) /root/ ->home directory for the root user
     16) /proc/ ->virtual filesystem documenting kernel and process status as text files
     
     12)more about the filesystem hierarchy standard
     -All Linux filesystem names are case-sensitive, so /boot, /Boot, and /BOOT represent three different directories (or folders). 
     
